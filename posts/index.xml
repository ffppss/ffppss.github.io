<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 杂货铺</title>
    <link>https://ffppss.github.io/posts/</link>
    <description>Recent content in Posts on 杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 Apr 2020 23:49:40 +0800</lastBuildDate>
    
	<atom:link href="https://ffppss.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Collections &amp;&amp; Arrays</title>
      <link>https://ffppss.github.io/posts/collections-%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8C-arrays-%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 24 Apr 2020 23:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/collections-%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8C-arrays-%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid>
      <description>Collections Collections 工具类常用方法: 排序 查找,替换操作 同步控制(不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合) 排序操作 void reverse(List list)//反转 void shuffle(List list)//随机排序 void sort(List list)//按自然排序的升序排</description>
    </item>
    
    <item>
      <title>Java 8新特性：Base64</title>
      <link>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Bbase64/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Bbase64/</guid>
      <description>在Java 8中，Base64编码已经成为Java类库的标准，Java 8 内置了 Base64 编码的编码器和解码器。 Base64工具类提供了一套静态方法获取下面三种BASE64编解码器： **基本：**输出被映射到一组</description>
    </item>
    
    <item>
      <title>Java 8新特性：Lambda表达式</title>
      <link>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>2014年3月发布的Java 8，有可能是Java版本更新中变化最大的一次。新的Java 8为开发者带来了许多重量级的新特性，包括Lambda表达式，流式数据处理，新的Optional类，新的日期和时间A</description>
    </item>
    
    <item>
      <title>Java 8新特性：Optional类</title>
      <link>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Boptional%E7%B1%BB/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Boptional%E7%B1%BB/</guid>
      <description>这是Java 8新增的一个类，用以解决程序中常见的NullPointerException异常问题。本篇文章将详细介绍Optional类，以及如何用它消除代码中的null检查。 避免使用null检查 作为J</description>
    </item>
    
    <item>
      <title>Java 8新特性：Stream API</title>
      <link>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Bstream-api/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Bstream-api/</guid>
      <description>Java8新增的Stream API与InputStream和OutputStream是完全不同的概念，Stream API是对Java中集合操作的增强，可以利用它进行各种过滤、排序、分组、聚合等操作。S</description>
    </item>
    
    <item>
      <title>Java 8新特性：接口默认方法与静态方法</title>
      <link>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</guid>
      <description>有这样一些场景，如果一个接口要添加一个方法，那所有的接口实现类都要去实现，而某些实现类根本就不需要实现这个方法也要写一个空实现，所以接口默认方法就是为了解决这个问题。 接口静态方法类似于默认方法，但是我</description>
    </item>
    
    <item>
      <title>Java 8新特性：新的时间和日期API</title>
      <link>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%96%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9Fapi/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E6%96%B0%E7%9A%84%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9Fapi/</guid>
      <description>Java 8另一个新增的重要特性就是引入了新的时间和日期API，它们被包含在java.time包中。借助新的时间和日期API可以以更简洁的方法处理时间和日期。 在介绍本篇文章内容之前，我们先来讨论Java 8为什</description>
    </item>
    
    <item>
      <title>Java try-with-resource 语法糖</title>
      <link>https://ffppss.github.io/posts/try-with-resources/</link>
      <pubDate>Fri, 24 Apr 2020 17:49:40 +0800</pubDate>
      
      <guid>https://ffppss.github.io/posts/try-with-resources/</guid>
      <description>背景 众所周知，所有被打开的系统资源，比如流、文件或者Socket连接等，都需要被开发者手动关闭，否则随着程序的不断运行，资源泄露将会累积成重大的生产事故。 在Java的江湖中，存在着一种名为finall</description>
    </item>
    
  </channel>
</rss>